{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNDHTyKB8h1hGPMoj2A74dI"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "aSu0gXg3ppjO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9b0b8f20-64e6-441d-9fe5-9c9ca1f750a7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['modelr2.joblib']"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from joblib import dump, load\n",
        "\n",
        "# Load data\n",
        "df = pd.read_csv(\"/content/wind_data.csv\", encoding= \"ISO-8859-1\")\n",
        "\n",
        "# Preprocess data\n",
        "df['Date/Time'] = pd.to_datetime(df['Date/Time'])\n",
        "df = df.set_index('Date/Time')\n",
        "\n",
        "#scaler = MinMaxScaler()\n",
        "df[['Wind Speed (m/s)', 'Wind Direction (ø)', 'Theoretical_Power_Curve (KWh)']] = scaler.fit_transform(df[['Wind Speed (m/s)', 'Wind Direction (ø)', 'Theoretical_Power_Curve (KWh)']])\n",
        "\n",
        "# Split data\n",
        "X = df.drop('LV ActivePower (kW)', axis=1)\n",
        "y = df['LV ActivePower (kW)']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train model\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate model\n",
        "y_pred = model.predict(X_test)\n",
        "from sklearn.metrics import r2_score\n",
        "r2_score(y_test, y_pred)\n",
        "\n",
        "# Save model\n",
        "dump(model, 'modelr2.joblib')\n",
        "\n",
        "# Load model\n",
        "#model = load('modelr.joblib')"
      ]
    }
  ]
}